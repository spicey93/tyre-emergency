---
const { heading, subheading } = Astro.props;
---

<div
  class="bg-dark d-flex text-light align-items-center justify-content-center"
  id="postcodeHero"
>
  <div class="container py-5 text-center d-flex flex-column align-items-center">
    <h1 class="fw-bold display-3">{heading}</h1>
    <p class="lead fs-4 mb-5">{subheading}</p>
    <form action="" method="get" id="postcodeForm" class="">
      <div class="input-group">
        <input
          type="text"
          name="postcode"
          id="postcode"
          placeholder="Postcode"
          class="form-control"
        />
        <button class="btn btn-danger" type="submit" id="submitButton">
          <span id="submitText">Search</span>
          <div
            id="loadingSpinner"
            class="spinner-border spinner-border-sm d-none"
            role="status"
          >
          </div>
        </button>
      </div>
    </form>
    <p class="text-light my-3">Or share your location with us instead</p>
    <button class="btn btn-light" id="locationBtn"
      ><i class="bi bi-crosshair"></i> Share Location</button
    >
  </div>
</div>

<div id="postcodeResult" class="container py-5 d-none">
  <div class="row g-0">
    <div class="col-12 col-lg-6 order-2 order-lg-1">
      <img src="/img/map.png" class="w-100" />
    </div>
    <div
      class="col-12 rounded col-lg-6 order-1 order-lg-2 text-center d-flex flex-column border align-items-center justify-content-center bg-light p-5"
    >
      <h2 class="display-5 fw-bold">
        We're only <span id="eta" class="text-success"></span> minutes away!
      </h2>
      <p>
        Great news! One of our mobile tyre fitters is just<strong>
          <span id="miles"></span> miles away</strong
        > from you. Give us a call now for immediate assistance.
      </p>
      <a href="tel:01623 325 123" class="btn btn-success btn-lg fw-bold"
        ><i class="bi bi-telephone-fill"></i> 01623 325 123</a
      >
    </div>
  </div>
</div>

<div id="outOfArea" class="container py-5 d-none">
  <div class="row g-0">
    <div class="col-12 col-lg-6 order-2 order-lg-1">
      <img src="/img/map.png" class="w-100" />
    </div>
    <div
      class="col-12 rounded col-lg-6 order-1 order-lg-2 text-center d-flex flex-column border align-items-center justify-content-center bg-danger text-light p-5"
    >
      <h2 class="display-5 fw-bold">Oh no! You're too far away.</h2>
      <p>
        Unfortunately you are outside of our service area, so we cannot help you
        on this occasion.
      </p>
    </div>
  </div>
</div>

<style>
  #postcodeHero {
    position: relative;
    min-height: 70vh;
    background-image: url("/img/tyre.jpeg");
    background-position: center;
    background-repeat: no-repeat;
    background-size: cover;
  }
  #postcodeHero::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8); /* Adjust the opacity as needed */
    z-index: 1;
  }
  #postcodeHero > * {
    position: relative;
    z-index: 2;
  }
  #map {
    height: 400px;
  }
  .d-none {
    display: none !important;
  }
</style>

<script>
  const postcodeHero = document.getElementById("postcodeHero");
  const postcodeResult = document.getElementById("postcodeResult");
  const outOfArea = document.getElementById("outOfArea");
  const postcodeForm = document.getElementById("postcodeForm");
  const postcodeInput = document.getElementById("postcode");
  const locationBtn = document.getElementById("locationBtn");
  const etaText = document.getElementById("eta");
  const milesText = document.getElementById("miles");
  const loadingSpinner = document.getElementById("loadingSpinner");
  const submitText = document.getElementById("submitText");

  const showLoading = () => {
    loadingSpinner.classList.remove("d-none");
    submitText.classList.add("d-none");
  };

  const hideLoading = () => {
    loadingSpinner.classList.add("d-none");
    submitText.classList.remove("d-none");
  };

  const showError = (message) => {
    alert(message);
    hideLoading();
  };

  const calculateRoute = async (latitude, longitude) => {
    try {
      const route = await fetch(
        `https://api.mapbox.com/directions/v5/mapbox/driving/-1.030989%2C53.136822%3B${longitude}%2C${latitude}?alternatives=true&geometries=geojson&language=en&overview=full&steps=true&access_token=pk.eyJ1IjoidHlyZWVtZXJnZW5jeWx0ZCIsImEiOiJjbTZlbmw5cjcxNzhkMmlxcXhzcm92eXdjIn0.GupKaOtrr7aHtvyBBXptsQ`
      );
      const routeData = await route.json();
      const distanceInMiles = (parseInt(routeData.routes[0].distance) * 0.000621371).toFixed(0);
      const durationInMinutes = (parseInt(routeData.routes[0].duration) / 60 + 10).toFixed(0);
      postcodeHero.classList.add("d-none");
      if (distanceInMiles < 40) {
        etaText.textContent = `${durationInMinutes}`;
        milesText.textContent = `${distanceInMiles}`;
        postcodeResult.classList.remove("d-none");
      } else {
        outOfArea.classList.remove("d-none");
      }

      hideLoading();
    } catch (error) {
      showError("Failed to calculate the route. Please try again later.");
    }
  };

  locationBtn.addEventListener("click", async () => {
    try {
      showLoading();
      if (!navigator.geolocation) {
        return showError("Geolocation is not supported by your browser.");
      }

      navigator.geolocation.getCurrentPosition(
        async (position) => {
          const { latitude, longitude } = position.coords;
          await calculateRoute(latitude, longitude);
        },
        () => {
          showError(
            "Unable to retrieve your location. Please check your browser settings."
          );
        }
      );
    } catch (error) {
      showError("An error occurred while fetching your location.");
    }
  });

  postcodeForm.addEventListener("submit", async (e) => {
    e.preventDefault();
    const postcode = postcodeInput.value;
    showLoading();

    try {
      const response = await fetch(
        `https://api.postcodes.io/postcodes/${postcode}/validate`
      );
      const data = await response.json();
      const isValidPostcode = data.result;
      if (!isValidPostcode) {
        return showError("Invalid postcode. Please try again.");
      }

      const postcodeResponse = await fetch(
        `https://api.postcodes.io/postcodes/${postcode}`
      );
      const postcodeData = await postcodeResponse.json();
      const { latitude, longitude } = postcodeData.result;

      await calculateRoute(latitude, longitude);
    } catch (error) {
      showError("An error occurred. Please try again later.");
    }
  });
</script>
